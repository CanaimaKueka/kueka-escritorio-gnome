#!/bin/bash -e
#
# ==============================================================================
# PAQUETE: canaima-escritorio-gnome
# ARCHIVO: postinst
# DESCRIPCIÓN: Configura el sistema despues la instalación del paquete.
# COPYRIGHT:
#  (C) 2010 Luis Alejandro Martínez Faneyth <martinez.faneyth@gmail.com>
#  (C) 2010 Diego Alberto Aguilera Zambrano <daguilera85@gmail.com>
#  (C) 2010 Carlos Alejandro Guerrero Mora <guerrerocarlos@gmail.com>
#  (C) 2010 Francisco Javier Vásquez Guerrero <franjvasquezg@gmail.com>
# LICENCIA: GPL3
# ==============================================================================
#
# Este programa es software libre. Puede redistribuirlo y/o modificarlo bajo los
# términos de la Licencia Pública General de GNU (versión 3).

PKG="canaima-escritorio-gnome"
LIST="acpid apmd anacron avahi-daemon bluetooth bluez-utils fetchmail dns-clean atd portmap rsync exim4 kerneloops saned acpi-fakekey acpi-support apmd canaima-bienvenido-video cryptdisks cryptdisks-early dhcdbd fam hibernate hotkey-setup kbd keymap.sh klogd live-initramfs lvm2 ntp openvpn pcmciautils pppd-dns resolvconf samba screen-cleanup splashy sysklogd tpconfig xdebconfigurator nfs-common statd"
FSTAB=/etc/fstab
LAPTOP=""
VERDE="\033[1;34m"
ROJO="\033[0;31m"
FIN="\033[0m"

if [ -n "$(which laptop-detect)" ]; then
	if laptop-detect >/dev/null; then
		LAPTOP=true
	fi
fi

case ${1} in

	configure)

	echo -e ${VERDE}"===== Parcheando Canaima GNU/Linux con el script de Lennart Poettering ====="${FIN}

	# Para cada usuario en /home/ ...
	for usuario in /home/*? ;
	do

		# Obteniendo sólo el nombre del usuario
		usuario_min=$(basename ${usuario})

		# Y en caso de que el usuario sea un usuario activo (existente en /etc/shadow) ...
		case $(grep ${usuario_min} /etc/shadow) in

		'')
		# No hace nada si no se encuentra en /etc/shadow
		;;

		*)

		BASHRC_F="/home/${usuario_min}/.bashrc"

		if [ $( cat ${BASHRC_F} | grep "/dev/cgroup/cpu/user" | wc -l ) == "0" ];
		then

			echo "Respaldando ${BASHRC_F} en ${BASHRC_F}.respaldo"
			[ ! -e ${BASHRC_F}.respaldo ] && cp ${BASHRC_F} ${BASHRC_F}.respaldo

			echo "Parcheando ${BASHRC_F}"

			echo "if [ \"\$PS1\" ] ; then" >> ${BASHRC_F}
			echo "mkdir -p -m 0700 /dev/cgroup/cpu/user/\$\$ > /dev/null 2>&1" >> ${BASHRC_F}
			echo "echo \$\$ > /dev/cgroup/cpu/user/\$\$/tasks" >> ${BASHRC_F}
			echo "echo \"1\" > /dev/cgroup/cpu/user/\$\$/notify_on_release" >> ${BASHRC_F}
			echo "fi" >> ${BASHRC_F}

			chown ${usuario_min}:${usuario_min} ${BASHRC_F}

		else

			echo ${ROJO}"Parece que ya aplicaste el patch a ${BASHRC_F} con anterioridad. Ignorando."${FIN}

		fi

		;;

		esac

	done

	RCLOCAL_F="/etc/rc.local"

	if [ $( cat ${RCLOCAL_F} | grep "/dev/cgroup/cpu/release_agent" | wc -l ) == "0" ];
	then

		INSERTAR=$( cat ${RCLOCAL_F} | grep -n "exit 0" | sort -nr | head -n 1 | awk -F: '{print $1}' )

		echo "Respaldando ${RCLOCAL_F} en ${RCLOCAL_F}.respaldo"
		[ ! -e ${RCLOCAL_F}.respaldo ] && cp ${RCLOCAL_F} ${RCLOCAL_F}.respaldo

		echo "Parcheando ${RCLOCAL_F}"

		sed "${INSERTAR}imkdir -p /dev/cgroup/cpu\nmount -t cgroup cgroup /dev/cgroup/cpu -o cpu\nmkdir -m 0777 /dev/cgroup/cpu/user\necho \"/usr/local/sbin/cgroup_clean\" > /dev/cgroup/cpu/release_agent" /etc/rc.local >> "${RCLOCAL_F}.nuevo"
		mv ${RCLOCAL_F}.nuevo ${RCLOCAL_F}

	else

		echo ${ROJO}"Parece que ya aplicaste el patch a $FICHERO con anterioridad. Ignorando."${FIN}

	fi

	echo -e "Otorgando permisos de ejecución a ${BASHRC_F}"
	chmod +x ${BASHRC_F}

	CGROUP_F="/usr/local/sbin/cgroup_clean"

	echo -e "Creando ${CGROUP_F}"

	echo "#!/bin/sh" > ${CGROUP_F}
	echo "if [ \"\$*\" != \"/user\" ]; then" >> ${CGROUP_F}
	echo "rmdir /dev/cgroup/cpu/\$*" >> ${CGROUP_F}
	echo "fi" >> ${CGROUP_F}

	echo -e "Otorgando permisos de ejecución a ${CGROUP_F}"
	chmod +x ${CGROUP_F}


		echo ${VERDE}"===== Removiendo scripts de inicio usualmente innecesarios ====="${FIN}

		for list in ${LIST}
		do

			if [ -n $LAPTOP ]
			then

				if [ ${list} != "acpid" ] || [ ${list} != "apmd" ]
				then

					update-rc.d -f ${list} remove
					[ -e /etc/init.d/${list} ] && rm -rf /etc/init.d/${list}
				fi

			else

				update-rc.d -f ${list} remove
				[ -e /etc/init.d/${list} ] && rm -rf /etc/init.d/${list}

			fi

		done

		if [ -e /etc/default/avahi-daemon ]
		then

			echo ${VERDE}"===== Asegurando que avahi-daemon no inicie ====="${FIN}
			sed -i 's/AVAHI_DAEMON_DETECT_LOCAL=1/AVAHI_DAEMON_DETECT_LOCAL=0/g' /etc/default/avahi-daemon

		fi

		if [ -e /etc/default/rcS ]
		then

			echo ${VERDE}"===== Cambiando la forma de carga de las dependencias iniciales del sistema (CONCURRENCY=makefile) ====="${FIN}
			[ -z $( grep "CONCURRENCY=makefile" /etc/default/rcS ) ] && echo 'CONCURRENCY=makefile' >> /etc/default/rcS

		fi

		if [ -e /etc/sysctl.conf ]
		then

			echo ${VERDE}"===== Reduciendo la cantidad de procesos que se swapean, la RAM es más rápida (vm.swappiness) ====="${FIN}
			[ -z $( grep "vm.swappiness=10" /etc/sysctl.conf ) ] && echo 'vm.swappiness=10' >> /etc/sysctl.conf

		fi

		if [ -e /etc/default/prelink ]
		then

			echo ${VERDE}"===== Pre-enlazando librerías para mejorar la eficiencia de Canaima (prelink) ====="${FIN}
			echo "Éste proceso tomará un poco de tiempo dependiendo de la cantidad de programas instalados ..."
			echo "Le recomendamos que se tome un buen café venezolano mientras espera."
			sed -i 's/PRELINKING=unknown/PRELINKING=yes/g' /etc/default/prelink
			sed -i 's/PRELINKING=no/PRELINKING=yes/g' /etc/default/prelink
			/etc/cron.daily/prelink

		fi

		if [ -e /etc/inittab ]
		then

			echo ${VERDE}"===== Reduciendo cantidad de TTY'S a 2, el usuario no las usa todas en realidad ====="${FIN}
			sed -i 's/3:23:respawn:\/sbin\/getty/#3:23:respawn:\/sbin\/getty/g' /etc/inittab
			sed -i 's/4:23:respawn:\/sbin\/getty/#4:23:respawn:\/sbin\/getty/g' /etc/inittab
			sed -i 's/5:23:respawn:\/sbin\/getty/#5:23:respawn:\/sbin\/getty/g' /etc/inittab
			sed -i 's/6:23:respawn:\/sbin\/getty/#6:23:respawn:\/sbin\/getty/g' /etc/inittab

		fi

		echo ${VERDE}"===== Añadiendo noatime a /etc/fstab ====="${FIN}

		if [ $( cat ${FSTAB} | grep "Optimizado para Canaima GNU/Linux" | wc -l ) == 0 ]
		then

			echo "#" >> ${FSTAB}
			echo "# Optimizado para Canaima GNU/Linux (agregado noatime a las opciones de disco)" >> ${FSTAB}
			echo "#" >> ${FSTAB}

		fi

		sed -i 's/   / /g' ${FSTAB}
		sed -i 's/   / /g' ${FSTAB}
		sed -i 's/  / /g' ${FSTAB}
		sed -i 's/  / /g' ${FSTAB}
		sed -i 's/, /,/g' ${FSTAB}
		sed -i 's/  / /g' ${FSTAB}
		sed -i 's/  / /g' ${FSTAB}

		for datos in $( cat ${FSTAB} | awk '{print $3"##--TOKEN--##"$2"##--TOKEN--##"$4"##--TOKEN--##"$1}' )
		do

		for fs in ext2 ext3 ext4 xfs
		do

		if [ $( echo $( expr "$datos" : "$fs" ) ) == 4 ]
		then

		parsing=${datos#$fs##--TOKEN--##}
		dispositivo=$( echo $parsing | sed 's/##--TOKEN--##/ /g' | awk '{print $1}' )
		dispositivo=$( echo $dispositivo | sed 's/\//\\\//g' )
		propiedad=$( echo $parsing | sed 's/##--TOKEN--##/ /g' | awk '{print $2}' )
		uuid=$( echo $parsing | sed 's/##--TOKEN--##/ /g' | awk '{print $3}' )

		case ${propiedad} in

			"defaults")

				if [ $dispositivo == "\/" ]
				then

					sed -i 's/'${uuid}' '${dispositivo}' '${fs}' '${propiedad}'/'${uuid}' '${dispositivo}' '${fs}' defaults,noatime,errors=remount-ro/g' ${FSTAB}

				else

					sed -i 's/'${uuid}' '${dispositivo}' '${fs}' '${propiedad}'/'${uuid}' '${dispositivo}' '${fs}' defaults,noatime/g' ${FSTAB}

				fi

			;;

			"errors=remount-ro,defaults")

				sed -i 's/'${uuid}' '${dispositivo}' '${fs}' '${propiedad}'/'${uuid}' '${dispositivo}' '${fs}' defaults,noatime,errors=remount-ro/g' ${FSTAB}

			;;

			"defaults,errors=remount-ro")

				sed -i 's/'${uuid}' '${dispositivo}' '${fs}' '${propiedad}'/'${uuid}' '${dispositivo}' '${fs}' defaults,noatime,errors=remount-ro/g' ${FSTAB}

			;;

			"errors=remount-ro")

				if [ $dispositivo == "\/" ]
				then

					sed -i 's/'${uuid}' '${dispositivo}' '${fs}' '${propiedad}'/'${uuid}' '${dispositivo}' '${fs}' defaults,noatime,errors=remount-ro/g' ${FSTAB}

				else

					sed -i 's/'${uuid}' '${dispositivo}' '${fs}' '${propiedad}'/'${uuid}' '${dispositivo}' '${fs}' noatime,errors=remount-ro/g' ${FSTAB}

				fi

			;;

		esac

		fi

		done

		done


	;;

	abort-upgrade|abort-remove|abort-deconfigure)
	;;

	*)

		echo "postinst no reconoce el argumento '"${1}"'" >&2
		exit 1

	;;

esac

#DEBHELPER#

exit 0
