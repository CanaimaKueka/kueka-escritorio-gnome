#!/bin/bash -e
#
# ==============================================================================
# PAQUETE: canaima-escritorio-gnome
# ARCHIVO: postinst
# DESCRIPCIÓN: Configura el sistema despues la instalación del paquete.
# COPYRIGHT:
#  (C) 2010 Luis Alejandro Martínez Faneyth <martinez.faneyth@gmail.com>
#  (C) 2010 Diego Alberto Aguilera Zambrano <daguilera85@gmail.com>
#  (C) 2010 Carlos Alejandro Guerrero Mora <guerrerocarlos@gmail.com>
#  (C) 2010 Francisco Javier Vásquez Guerrero <franjvasquezg@gmail.com>
# LICENCIA: GPL3
# ==============================================================================
#
# Este programa es software libre. Puede redistribuirlo y/o modificarlo bajo los
# términos de la Licencia Pública General de GNU (versión 3).

PKG="canaima-escritorio-gnome"
LIST="acpid apmd anacron avahi-daemon bluetooth bluez-utils fetchmail dns-clean atd portmap rsync exim4 kerneloops saned acpi-fakekey acpi-support apmd canaima-bienvenido-video cryptdisks cryptdisks-early dhcdbd fam hibernate hotkey-setup kbd keymap.sh klogd live-initramfs lvm2 ntp openvpn pcmciautils pppd-dns resolvconf samba screen-cleanup splashy sysklogd tpconfig xdebconfigurator nfs-common statd"
FSTAB=/etc/fstab
LAPTOP=""
YELLOW="\033[1;33m"
RED="\033[0;31m"
ENDCOLOR="\033[0m"

function PARCHEAR ()
{

# =======================================================================
# FUNCIÓN PARCHEAR
#
# Aplica las mejoras del script de Lennart Poettering
#
# =======================================================================

echo -e $YELLOW"===== Parcheando Canaima GNU/Linux con el script de Lennart Poettering ====="$ENDCOLOR

FICHERO="$HOME/.bashrc"

LINEAS=$( cat $FICHERO | grep "/dev/cgroup/cpu/user" | wc -l )

if [ "$LINEAS" == "0" ];
then
	echo "Parcheando $FICHERO ..."
	echo "if [ \"\$PS1\" ] ; then" | tee -a $FICHERO
	echo "mkdir -p -m 0700 /dev/cgroup/cpu/user/\$\$ > /dev/null 2>&1" | tee -a $FICHERO
	echo "echo \$\$ > /dev/cgroup/cpu/user/\$\$/tasks" | tee -a $FICHERO
	echo "echo \"1\" > /dev/cgroup/cpu/user/\$\$/notify_on_release" | tee -a $FICHERO
	echo "fi" | tee -a $FICHERO
else
	echo "Parece que ya aplicaste el patch a $FICHERO con anterioridad... Cancelando."
fi

FICHERO="/etc/rc.local"

LINEAS=$( cat $FICHERO | grep "/dev/cgroup/cpu/release_agent" | wc -l )

if [ "$LINEAS" == "0" ];
then
	echo "Parcheando ${FICHERO} ..."

	POSI=$( cat $FICHERO | grep -n "exit 0" | sort -nr | head -n 1 | awk -F: '{print $1}' )

	echo "Respaldando $FICHERO en /etc/rc.local.backup"
	cp /etc/rc.local /etc/rc.local.backup
	sed "${POSI}imkdir -p /dev/cgroup/cpu\nmount -t cgroup cgroup /dev/cgroup/cpu -o cpu\nmkdir -m 0777 /dev/cgroup/cpu/user\necho \"/usr/local/sbin/cgroup_clean\" > /dev/cgroup/cpu/release_agent" /etc/rc.local | tee /etc/rc.new.local
	mv /etc/rc.new.local /etc/rc.local

else
	echo "Parece que ya aplicaste el patch a $FICHERO con anterioridad... Cancelando."
fi

echo -e $YELLOW"===== Otorgando permisos de ejecución a ${FICHERO} ====="$ENDCOLOR
sudo chmod +x $FICHERO

FICHERO="/usr/local/sbin/cgroup_clean"

echo -e $YELLOW"===== Creando ${FICHERO} ====="$ENDCOLOR

if [ ! -e $FICHERO ];
then
	echo "#!/bin/sh" | tee $FICHERO
	echo "if [ \"\$*\" != \"/user\" ]; then" | tee -a $FICHERO
	echo "rmdir /dev/cgroup/cpu/\$*" | tee -a $FICHERO
	echo "fi" | tee -a $FICHERO

else
	echo "El archivo $FICHERO ya existe."
fi;

echo -e $YELLOW"===== Otorgando permisos de ejecución a ${FICHERO} ====="$ENDCOLOR

sudo chmod +x $FICHERO

}

if [ -n "$(which laptop-detect)" ]; then
	if laptop-detect >/dev/null; then
		LAPTOP=true
	fi
fi

case ${1} in

	configure)

		PARCHEAR

		echo "===== Removiendo scripts de inicio usualmente innecesarios ====="

		for list in ${LIST}
		do

			if [ -n $LAPTOP ]
			then

				if [ ${list} != "acpid" ] || [ ${list} != "apmd" ]
				then

					echo "Removiendo demonio ${list} ..."
					update-rc.d -f ${list} remove
					[ -e /etc/init.d/${list} ] && rm -rf /etc/init.d/${list}
				fi

			else

				echo "Removiendo demonio ${list} ..."
				update-rc.d -f ${list} remove
				[ -e /etc/init.d/${list} ] && rm -rf /etc/init.d/${list}

			fi

		done

		if [ -e /etc/default/avahi-daemon ]
		then

			echo "===== Asegurando que avahi-daemon no inicie ====="
			sed -i 's/AVAHI_DAEMON_DETECT_LOCAL=1/AVAHI_DAEMON_DETECT_LOCAL=0/g' /etc/default/avahi-daemon

		fi

		if [ -e /etc/default/rcS ]
		then

			echo "===== Cambiando la forma de carga de las dependencias iniciales del sistema (CONCURRENCY=makefile) ====="
			echo 'CONCURRENCY=makefile' >> /etc/default/rcS

		fi

		if [ -e /etc/sysctl.conf ]
		then

			echo "===== Reduciendo la cantidad de procesos que se swapean, la RAM es más rápida (vm.swappiness) ====="
			echo 'vm.swappiness=10' >> /etc/sysctl.conf

		fi

		if [ -e /etc/default/prelink ]
		then

			echo "===== Pre-enlazando librerías para mejorar la eficiencia de Canaima (prelink) ====="
			echo "Éste proceso tomará un poco de tiempo dependiendo de la cantidad de programas instalados ..."
			echo "Le recomendamos que se tome un buen café venezolano mientras espera."
			sed -i 's/PRELINKING=unknown/PRELINKING=yes/g' /etc/default/prelink
			sed -i 's/PRELINKING=no/PRELINKING=yes/g' /etc/default/prelink
			/etc/cron.daily/prelink

		fi

		if [ -e /etc/inittab ]
		then

			echo "===== Reduciendo cantidad de TTY'S a 2, el usuario no las usa todas en realidad ====="
			sed -i 's/3:23:respawn:\/sbin\/getty/#3:23:respawn:\/sbin\/getty/g' /etc/inittab
			sed -i 's/4:23:respawn:\/sbin\/getty/#4:23:respawn:\/sbin\/getty/g' /etc/inittab
			sed -i 's/5:23:respawn:\/sbin\/getty/#5:23:respawn:\/sbin\/getty/g' /etc/inittab
			sed -i 's/6:23:respawn:\/sbin\/getty/#6:23:respawn:\/sbin\/getty/g' /etc/inittab

		fi

		echo "===== Añadiendo noatime a /etc/fstab ====="

		if [ $( cat ${FSTAB} | grep "Optimizado para Canaima GNU/Linux" | wc -l ) == 0 ]
		then

			echo "#" >> ${FSTAB}
			echo "# Optimizado para Canaima GNU/Linux (agregado noatime a las opciones de disco)" >> ${FSTAB}
			echo "#" >> ${FSTAB}

		fi

		sed -i 's/   / /g' ${FSTAB}
		sed -i 's/   / /g' ${FSTAB}
		sed -i 's/  / /g' ${FSTAB}
		sed -i 's/  / /g' ${FSTAB}
		sed -i 's/, /,/g' ${FSTAB}
		sed -i 's/  / /g' ${FSTAB}
		sed -i 's/  / /g' ${FSTAB}

		for datos in $( cat ${FSTAB} | awk '{print $3"##--TOKEN--##"$2"##--TOKEN--##"$4"##--TOKEN--##"$1}' )
		do

		for fs in ext2 ext3 ext4
		do

		if [ $( echo $( expr "$datos" : "$fs" ) ) == 4 ]
		then

		parsing=${datos#$fs##--TOKEN--##}
		dispositivo=$( echo $parsing | sed 's/##--TOKEN--##/ /g' | awk '{print $1}' )
		dispositivo=$( echo $dispositivo | sed 's/\//\\\//g' )
		propiedad=$( echo $parsing | sed 's/##--TOKEN--##/ /g' | awk '{print $2}' )
		uuid=$( echo $parsing | sed 's/##--TOKEN--##/ /g' | awk '{print $3}' )

		case ${propiedad} in

			"defaults")

				if [ $dispositivo == "\/" ]
				then

					sed -i 's/'${uuid}' '${dispositivo}' '${fs}' '${propiedad}'/'${uuid}' '${dispositivo}' '${fs}' defaults,noatime,errors=remount-ro/g' ${FSTAB}

				else

					sed -i 's/'${uuid}' '${dispositivo}' '${fs}' '${propiedad}'/'${uuid}' '${dispositivo}' '${fs}' defaults,noatime/g' ${FSTAB}

				fi

			;;

			"errors=remount-ro,defaults")

				sed -i 's/'${uuid}' '${dispositivo}' '${fs}' '${propiedad}'/'${uuid}' '${dispositivo}' '${fs}' defaults,noatime,errors=remount-ro/g' ${FSTAB}

			;;

			"defaults,errors=remount-ro")

				sed -i 's/'${uuid}' '${dispositivo}' '${fs}' '${propiedad}'/'${uuid}' '${dispositivo}' '${fs}' defaults,noatime,errors=remount-ro/g' ${FSTAB}

			;;

			"errors=remount-ro")

				if [ $dispositivo == "\/" ]
				then

					sed -i 's/'${uuid}' '${dispositivo}' '${fs}' '${propiedad}'/'${uuid}' '${dispositivo}' '${fs}' defaults,noatime,errors=remount-ro/g' ${FSTAB}

				else

					sed -i 's/'${uuid}' '${dispositivo}' '${fs}' '${propiedad}'/'${uuid}' '${dispositivo}' '${fs}' noatime,errors=remount-ro/g' ${FSTAB}

				fi

			;;

		esac

		fi

		done

		done


	;;

	abort-upgrade|abort-remove|abort-deconfigure)
	;;

	*)

		echo "postinst no reconoce el argumento '"${1}"'" >&2
		exit 1

	;;

esac

#DEBHELPER#

exit 0
